# AI_project_master/app.py
import os, json, time
from pathlib import Path

import streamlit as st
import pandas as pd
import joblib

st.set_page_config(page_title="Earthquake Alert", page_icon="üåé", layout="wide")

# ---------------- Paths ----------------
BASE        = Path(__file__).resolve().parent
DATA_PATH   = BASE / "data" / "earthquakes.csv"
MODEL_PATH  = BASE / "models" / "earthquake_model.pkl"
ENC_PATH    = BASE / "models" / "label_encoder.pkl"
ANN_PATH    = BASE / "storage" / "public_announcements.json"
METRICS_CSV = BASE / "metrics" / "metrics.csv"
FIG_CM      = BASE / "metrics" / "figs" / "confusion_matrix.png"

# ---------------- Sidebar: Mode & Admin PIN ----------------
st.sidebar.title("üåé Earthquake Alert")
mode = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î", ["Public Alert", "Admin Dashboard"], index=0)

# (‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö production ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏™‡πà‡∏á)
DEFAULT_PIN = os.environ.get("EA_ADMIN_PIN", "cis2025")
admin_ok = False
if mode == "Admin Dashboard":
    pin = st.sidebar.text_input("Admin PIN", type="password", help="‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: cis2025 (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ ENV EA_ADMIN_PIN)")
    admin_ok = (pin == DEFAULT_PIN)

# ---------------- Header ----------------
st.title("üåé ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß")
if mode == "Public Alert":
    st.caption("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå/‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ ‚Üí ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ AI (Decision Tree) ‚Üí ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®")
else:
    st.caption("‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥/‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå/‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç/‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏ö‡∏™‡∏ô")

# ---------------- Common: Check files ----------------
missing = [p for p in [DATA_PATH, MODEL_PATH, ENC_PATH] if not p.exists()]
if mode == "Public Alert":
    if missing:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:\n" + "\n".join(f"- {p}" for p in missing))
        st.stop()
else:
    # ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Admin ‡πÉ‡∏´‡πâ‡∏¢‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ (‡∏ñ‡πâ‡∏≤‡∏ö‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô)
    pass

# ---------------- Load (if exists) ----------------
df = pd.read_csv(DATA_PATH) if DATA_PATH.exists() else None
model = joblib.load(MODEL_PATH) if MODEL_PATH.exists() else None
le    = joblib.load(ENC_PATH)   if ENC_PATH.exists()   else None

# ========== MODE: ADMIN DASHBOARD ==========
if mode == "Admin Dashboard":
    if not admin_ok:
        st.warning("‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å Admin PIN ‡∏ó‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î")
        st.stop()

    colA, colB, colC = st.columns([1,1,1])

    # 1) Accuracy & Best Params from metrics.csv
    with colA:
        st.subheader("üìä Model Accuracy")
        if METRICS_CSV.exists():
            mdf = pd.read_csv(METRICS_CSV)
            if not mdf.empty and "accuracy" in mdf.columns:
                top = mdf.sort_values("accuracy", ascending=False).iloc[0]
                acc = float(top["accuracy"])
                st.metric("Accuracy (Test)", f"{acc*100:.2f}%")
            else:
                st.info("metrics.csv ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå accuracy")
        else:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö metrics.csv (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å‡∏´‡∏£‡∏∑‡∏≠ train.py)")

    with colB:
        st.subheader("‚öôÔ∏è Best Parameters")
        if METRICS_CSV.exists():
            mdf = pd.read_csv(METRICS_CSV)
            if not mdf.empty:
                top = mdf.sort_values("accuracy", ascending=False).iloc[0]
                st.code(f"feature_set: {top.get('feature_set','-')}\n"
                        f"features   : {top.get('features','-')}\n"
                        f"params     : {top.get('params','-')}", language="text")
            else:
                st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• params ‡πÉ‡∏ô metrics.csv")
        else:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö metrics.csv")

    with colC:
        st.subheader("üïí Model Files")
        rows = []
        for p in [MODEL_PATH, ENC_PATH, METRICS_CSV]:
            if p.exists():
                ts = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(p.stat().st_mtime))
                rows.append({"file": str(p.name), "status": "OK", "updated": ts})
            else:
                rows.append({"file": str(p.name), "status": "missing", "updated": "-"})
        st.dataframe(pd.DataFrame(rows), use_container_width=True)

    st.divider()

    # 2) Feature Importances (from DecisionTree)
    st.subheader("üå≥ Feature Importances (Decision Tree)")
    if model is not None and hasattr(model, "feature_importances_") and df is not None:
        # ‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ß‡πá‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        feat_cols = [c for c in ["magnitude","depth","cdi","mmi","sig"] if c in df.columns]
        try:
            imps = pd.Series(model.feature_importances_, index=feat_cols).sort_values(ascending=False)
            st.bar_chart(imps)  # chart ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            st.caption("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ñ‡πà‡∏≤ importance ‡∏™‡∏π‡∏á = ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à")
        except Exception as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô feature_importances_: {e}")
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Decision Tree)")

    # 3) Confusion Matrix (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å Jupyter)
    st.subheader("üß© Confusion Matrix (‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å)")
    if FIG_CM.exists():
        st.image(str(FIG_CM), caption="Confusion Matrix (‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å notebooks)")
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ Confusion Matrix (metrics/figs/confusion_matrix.png)")

    st.divider()
    st.subheader("üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà")
    st.write(
        "- Accuracy ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö/‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á (‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á metrics.csv)\n"
        "- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Precision/Recall ‡∏£‡∏≤‡∏¢‡∏Ñ‡∏•‡∏≤‡∏™‡πÉ‡∏ô‡πÇ‡∏ô‡πâ‡∏ï‡∏ö‡∏∏‡πä‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏à‡∏∏‡∏î‡∏™‡∏±‡∏ö‡∏™‡∏ô\n"
        "- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå/‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏ô train.py ‡∏´‡∏£‡∏∑‡∏≠ notebooks ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà\n"
    )

# ========== MODE: PUBLIC ALERT ==========
if mode == "Public Alert":
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI
    for col in ["magnitude","depth","cdi","mmi","sig"]:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors="coerce")
            df[col] = df[col].fillna(df[col].median())

    st.write(f"üì¶ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(df):,} ‡πÅ‡∏ñ‡∏ß")
    with st.expander("‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (5 ‡πÅ‡∏ñ‡∏ß)"):
        st.dataframe(df.head(5), use_container_width=True)

    # Officer panel
    st.subheader("üëÆ‚Äç‚ôÄÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢")
    latest = df.tail(200).reset_index(drop=True)

    left, right = st.columns([1,1])
    with left:
        st.markdown("**‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå (200 ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)**")
        idx = st.number_input("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÅ‡∏ñ‡∏ß:", min_value=0, max_value=len(latest)-1,
                              value=len(latest)-1, step=1)
        row = latest.iloc[int(idx)].to_dict()

    with right:
        st.markdown("**‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏á (‡∏ó‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ)**")
        def defval(k, default):
            v = row.get(k, default)
            try:
                return float(v) if pd.notna(v) else float(default)
            except Exception:
                return float(default)

        mag = st.number_input("magnitude", value=defval("magnitude", 5.0))
        dep = st.number_input("depth",     value=defval("depth", 10.0))
        cdi = st.number_input("cdi",       value=defval("cdi", 3.0))
        mmi = st.number_input("mmi",       value=defval("mmi", 3.0))
        sig = st.number_input("sig",       value=defval("sig", 300.0))

        inputs = pd.DataFrame([{
            "magnitude": mag, "depth": dep, "cdi": cdi, "mmi": mmi, "sig": sig
        }])

    if st.button("üß† ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ AI", use_container_width=True):
        feat_cols = [c for c in ["magnitude","depth","cdi","mmi","sig"] if c in df.columns]
        X = inputs[feat_cols]
        y_id = model.predict(X)[0]
        y_label = le.inverse_transform([y_id])[0]
        st.success(f"‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: **{str(y_label).upper()}**")
        st.session_state["last_pred"] = {
            "risk": str(y_label),
            "inputs": inputs.iloc[0].to_dict(),
            "region": str(row.get("place", "Affected area")) if "place" in row else "Affected area"
        }

    # Publish announcement
    if "last_pred" in st.session_state:
        st.divider()
        st.subheader("üì¢ ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)")
        pred = st.session_state["last_pred"]
        region = st.text_input("‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà/‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ", value=pred["region"])
        msg_default = f"‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏±‡πà‡∏ô‡∏™‡∏∞‡πÄ‡∏ó‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö {pred['risk'].upper()} ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"
        message = st.text_area("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®", value=msg_default, height=80)
        tips = ["‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ‡πÇ‡∏ï‡πä‡∏∞/‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á", "‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏•‡∏¥‡∏ü‡∏ï‡πå/‡∏Å‡∏£‡∏∞‡∏à‡∏Å", "‡∏õ‡∏¥‡∏î‡πÅ‡∏Å‡πä‡∏™/‡πÑ‡∏ü‡∏ü‡πâ‡∏≤"]

        if st.button("‚úÖ ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®", type="primary", use_container_width=True):
            ANN_PATH.parent.mkdir(parents=True, exist_ok=True)
            doc = {
                "last_updated": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
                "announcements": [{
                    "id": str(int(time.time())),
                    "region": region,
                    "risk_level": pred["risk"],
                    "message": message,
                    "tips": tips,
                    "inputs": pred["inputs"]
                }]
            }
            with open(ANN_PATH, "w", encoding="utf-8") as f:
                json.dump(doc, f, ensure_ascii=False, indent=2)
            st.success("‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÑ‡∏õ‡∏î‡∏π‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üëá")

    # Public area
    st.divider()
    st.subheader("üö® ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (‡πÅ‡∏™‡∏î‡∏á‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô)")
    if ANN_PATH.exists():
        ann = json.load(open(ANN_PATH, encoding="utf-8"))
        st.caption(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {ann.get('last_updated','-')}")
        for a in ann.get("announcements", []):
            level = str(a.get("risk_level","")).lower()
            color = {"green":"üü¢","yellow":"üü°","orange":"üü†","red":"üî¥"}.get(level, "üî∂")
            st.markdown(f"### {color} ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: **{str(a.get('risk_level','')).upper()}**")
            st.write(f"‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: **{a.get('region','-')}**")
            if a.get("message"): st.write(a["message"])
            if a.get("tips"):
                st.write("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
                for t in a["tips"]:
                    st.write(f"- {t}")
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")

# Credits (‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠ 2)
with st.expander("‚ÑπÔ∏è Dataset Source / ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"):
    st.write("Dataset: Kaggle ‚Äì Earthquake Alert Prediction (Ahmed Uzaki) ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
